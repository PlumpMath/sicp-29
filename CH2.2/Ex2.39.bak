#lang racket
;Ex 2.39

(define(accumulate op init seqs)
  (if (null? seqs)
      null
      (op (car seqs)
          (accumulate op init seqs))))

(define (fold-right op init sequence)
  (if (null? sequence)
      init
      (op (car sequence)
          (accumulate op init (cdr sequence)))))

(define (reverse-using-right sequence)
  (fold-right (lambda(first already-reversed)
                (append already-reversed (list first)))
              null
              sequence))

(define my-list (list 1 2 3 4))
(reverse-using-right my-list)